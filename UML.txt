@startuml

exception Exception
exception DuplicateUserException
exception WrongPhoneNumberException
exception WrongMailException
exception WrongMoneyException
exception SessionConflictException
exception UserNotFoundException
exception AuthenticationRequiredException
exception WrongStationException
exception NoFundsException
exception WrongDateFormatException
exception BikeNotFoundException
exception RentNotFoundException
exception NotEnoughFreeSpaceException

class Users_Manager
{
    - Users: List<User>
    - CurrentUser: User

    + Users_Manager()
    + Register(Imie: string, Nazwisko: string, Numertel: string, Mail: string, Pieniadze: double = 0): void
    + Login(Imie: string, Nazwisko: string, Numertel: string, Mail: string): void
    + Logout(): void
    + getCurrentUser(): User
}

class User {
    - Imie: string
    - Nazwisko: string
    - Numertel: string
    - Mail: string
    - Pieniadze: double
    - Rent_Active: List<BikeRent>
    - Rent_History: List<BikeRent>

    + User(Imie: string, Nazwisko: string, Numertel: string, Mail: string, Pieniadze: double = 0)
    + getImie(): string
    + getNazwisko(): string
    + getNumertel(): string
    + getMail(): string
    + Rent(Bike_id: int, Station_name: string, Start_time: string): void
    + Return_Bike(Bike_id: int, Station_name: string, End_time: string): void
    + Deposit(Value: double): void
    + Display_Rent_Active(): void
    + Display_Rent_History(): void
}

class BikeRent {
    - <<get>> bicycle: Bike
    - <<get>> startTime: DateTime
    - <<get/set>> endTime: DateTime
    - <<get>> startStation: BikeStation
    - <<get/set>> endStation: BikeStation
    - <<get>> cost: double

    + BikeRent(bicycl: Bike, startTime: DateTime, startStation: BikeStation)
    + SetCost(): double
    + SetEndTime(EndTime2: DateTime): void
    + SetEndStation(EndStation2: string): void
    + ToString(): string
}

class StationsAggregation
{
    - stations: List<BikeStation>

    + StationsAggregation()
    + getStation(Name: string): BikeStation
    + AddStation(newStation: BikeStation): void
    + RemoveStation(removedStation: BikeStation): void
    + GetStationsInfo(): void
} 

class BikeStation
{
    - name: string
    - allBikes: List<Bike>
    - totalSlots: int
    - <<get>> freeSlots: int

    + BikeStation(name: string, totalSlots: int)
    + AddBike(newBike: Bike): void
    + RemoveBike(removedBike_id: Bike): Bike
    + GetRegular(): List<Bike>
    + GetChild(): List<Bike>
    + GetTandem(): List<Bike>
    + getName(): string
    + getStationInfo(): void
    + ToString(): string
}

abstract class Bike
{
    - <<get>> id: int
    - <<get>> price: double
    - static takenIDs: HashSet<id>
    - static rand: Random 

    + Bike(price: double)
    + ToString(): string
}

class RegularBike
{
    - <<get>> id: int
    - <<get>> price: double

    + Bike(price: double)
    + ToString(): string
}
class ChildBike
{
    - <<get>> id: int
    - <<get>> price: double

    + Bike(price: double)
    + ToString(): string
}
class TandemBike
{
    - <<get>> id: int
    - <<get>> price: double

    + Bike(price: double)
    + ToString(): string
}

Exception <|-- DuplicateUserException
Exception <|-- WrongPhoneNumberException
Exception <|-- WrongMailException
Exception <|-- WrongMoneyException
Exception <|-- SessionConflictException
Exception <|-- UserNotFoundException
Exception <|-- AuthenticationRequiredException
Exception <|-- WrongStationException
Exception <|-- NoFundsException
Exception <|-- WrongDateFormatException
Exception <|-- BikeNotFoundException
Exception <|-- RentNotFoundException
Exception <|-- NotEnoughFreeSpaceException

User "1" *-- "0..*" BikeRent : wypoÅ¼ycza
Bike <|-- RegularBike
Bike <|-- TandemBike
Bike <|-- ChildBike
StationsAggregation "1" o-- "0..*" BikeStation
BikeStation "1" o-- "0..*" Bike
BikeRent "1" --o "1" Bike
BikeRent "1" --* "2" BikeStation
Users_Manager "1" o-- "0..*" User
@enduml